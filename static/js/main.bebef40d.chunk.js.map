{"version":3,"sources":["firebase.js","TinderCards.js","Header.js","SwipeButtons.js","ChatScreen.js","Chat.js","Chats.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","TinderCards","useState","lastDirection","setLastDirection","characters","setCharacters","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","className","character","key","name","preventSwipe","onSwipe","dir","direction","nameToDelete","console","log","onCardLeftScreen","style","backgroundImage","url","Header","backButton","history","profilePic","useHistory","IconButton","onClick","replace","fontSize","to","src","alt","SwipeButtons","swiped","ChatScreen","user","image","message","messages","Avatar","placeholder","Chat","timestamp","Chats","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bebef40d.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n apiKey: \"AIzaSyBQSR9Vf-s9kXsJP4xNa5HhIwej1y-fL9w\",\r\n  authDomain: \"whatsappclone-b1633.firebaseapp.com\",\r\n  databaseURL: \"https://whatsappclone-b1633-default-rtdb.firebaseio.com\",\r\n  projectId: \"whatsappclone-b1633\",\r\n  storageBucket: \"whatsappclone-b1633.appspot.com\",\r\n  messagingSenderId: \"240697125767\",\r\n  appId: \"1:240697125767:web:bcc41a4fca6eb5d58c8122\",\r\n  measurementId: \"G-WXYBBGRF6V\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport { db } from \"./firebase\";\r\nimport \"./TinderCards.css\";\r\n\r\nfunction TinderCards() {\r\n  const [lastDirection, setLastDirection] = useState();\r\n  const [characters, setCharacters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"characters\").onSnapshot((snapshot) =>\r\n      setCharacters(snapshot.docs.map((doc) => doc.data()))\r\n    );\r\n  }, []);\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    console.log(\"removing: \" + nameToDelete);\r\n    setLastDirection(direction);\r\n  };\r\n\r\n  const outOfFrame = (name) => {\r\n    console.log(name + \" left the screen!\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tinderCards\">\r\n      <div className=\"tinderCards__cardContainer\">\r\n        {characters.map((character) => (\r\n          <TinderCard\r\n            className=\"swipe\"\r\n            key={character.name}\r\n            preventSwipe={[\"up\", \"down\"]}\r\n            onSwipe={(dir) => swiped(dir, character.name)}\r\n            onCardLeftScreen={() => outOfFrame(character.name)}\r\n          >\r\n            <div\r\n              style={{ backgroundImage: \"url(\" + character.url + \")\" }}\r\n              className=\"card\"\r\n            >\r\n              <h3>{character.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n      </div>\r\n\r\n      {lastDirection ? (\r\n        <h2 className=\"infoText\">You swiped {lastDirection}</h2>\r\n      ) : (\r\n        <h2 className=\"infoText\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TinderCards;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport ForumIcon from \"@material-ui/icons/Forum\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction Header({ backButton, profilePic }) {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"header\">\r\n      {backButton ? (\r\n        <IconButton onClick={() => history.replace(backButton)}>\r\n          <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\" />\r\n        </IconButton>\r\n      ) : (\r\n        <IconButton>\r\n          <PersonIcon fontSize=\"large\" className=\"header__icon\" />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Link to=\"/\">\r\n        <img\r\n          className=\"header__logo\"\r\n          src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\r\n          alt=\"\"\r\n        />\r\n      </Link>\r\n\r\n      <Link to=\"/chat\">\r\n        <IconButton>\r\n          <ForumIcon fontSize=\"large\" className=\"header__icon\" />\r\n        </IconButton>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./SwipeButtons.css\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nfunction SwipeButtons({ swiped }) {\r\n  return (\r\n    <div className=\"swipeButtons\">\r\n      <IconButton onClick={swiped} className=\"swipeButtons__repeat\">\r\n        <ReplayIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton onClick={swiped} className=\"swipeButtons__left\">\r\n        <CloseIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton onClick={swiped} className=\"swipeButtons__star\">\r\n        <StarRateIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton onClick={swiped} className=\"swipeButtons__right\">\r\n        <FavoriteIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton onClick={swiped} className=\"swipeButtons__lightning\">\r\n        <FlashOnIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SwipeButtons;\r\n","import React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nimport \"./ChatScreen.css\";\r\n\r\nfunction ChatScreen() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      user: \"Sandra\",\r\n      image:\r\n        \"https://thumbor.forbes.com/thumbor/fit-in/416x416/filters%3Aformat%28jpg%29/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F5ed560d07fe4060006bbce1e%2F0x0.jpg%3Fbackground%3D000000%26cropX1%3D422%26cropX2%3D1300%26cropY1%3D0%26cropY2%3D879\",\r\n      message: \"Whats up ♥️?\",\r\n    },\r\n    {\r\n      user: \"Sandra\",\r\n      image:\r\n        \"https://thumbor.forbes.com/thumbor/fit-in/416x416/filters%3Aformat%28jpg%29/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F5ed560d07fe4060006bbce1e%2F0x0.jpg%3Fbackground%3D000000%26cropX1%3D422%26cropX2%3D1300%26cropY1%3D0%26cropY2%3D879\",\r\n      message: \"Hows it going!\",\r\n    },\r\n    {\r\n      message: \"Hi! How are you Ellen!\",\r\n    },\r\n  ]);\r\n  return (\r\n    <div className=\"chatScreen\">\r\n      <div>\r\n        <p className=\"chatScreen__timestamp\">\r\n          YOU MATCHED WITH ELLEN ON 10/08/20\r\n        </p>\r\n        {messages.map((message) =>\r\n          message.user ? (\r\n            <div className=\"chatScreen__message\">\r\n              <Avatar\r\n                className=\"chatScreen__image\"\r\n                alt={message.name}\r\n                src={message.image}\r\n              />\r\n              <p className=\"chatScreen__text\">{message.message}</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"chatScreen__message\">\r\n              <p className=\"chatScreen__textUser\">{message.message}</p>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"chatScreen__input\">\r\n        <form>\r\n          <input\r\n            className=\"chatScreen__inputField\"\r\n            placeholder=\"Type a message...\"\r\n          ></input>\r\n          <button className=\"chatScreen__inputButton\">SEND</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatScreen;\r\n","import React from \"react\";\r\nimport \"./Chat.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chat({ name, message, profilePic, timestamp }) {\r\n  return (\r\n    <Link to={`/chat/${name}`}>\r\n      <div className=\"chat\">\r\n        <Avatar className=\"chat__image\" alt=\"name\" src={profilePic} />\r\n        <div className=\"chat__details\">\r\n          <h2>{name}</h2>\r\n          <p>{message}</p>\r\n        </div>\r\n        <p className=\"chat__timestamp\">{timestamp}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport Chat from \"./Chat\";\r\nimport \"./Chats.css\";\r\n\r\nfunction Chats() {\r\n  return (\r\n    <div className=\"chats\">\r\n      <Chat\r\n        name=\"Sarah\"\r\n        message=\"Hey! how are you 😃\"\r\n        timestamp=\"35 minutes ago\"\r\n        profilePic=\"https://4.bp.blogspot.com/-eUHYCVj6AmY/TYGBGTPjNLI/AAAAAAAABwI/MIJSB6gvtz8/s1600/sarah%2Bwalker%2B6.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Ellen\"\r\n        message=\"Whats up ♥️?\"\r\n        timestamp=\"55 minutes ago\"\r\n        profilePic=\"https://thumbor.forbes.com/thumbor/fit-in/416x416/filters%3Aformat%28jpg%29/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F5ed560d07fe4060006bbce1e%2F0x0.jpg%3Fbackground%3D000000%26cropX1%3D422%26cropX2%3D1300%26cropY1%3D0%26cropY2%3D879\"\r\n      />\r\n      <Chat\r\n        name=\"Sandra\"\r\n        message=\"Ola!\"\r\n        timestamp=\"3 days ago\"\r\n        profilePic=\"https://thumbor.forbes.com/thumbor/fit-in/416x416/filters%3Aformat%28jpg%29/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F0cd934b4c7b6065496ba00e1f5f826d4%2F0x0.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Natasha\"\r\n        message=\"Oops there is he is... 🐕\"\r\n        timestamp=\"1 week ago\"\r\n        profilePic=\"https://static.billboard.com/files/media/lady-gaga-vf-oscars-2019-xgh-billboard-1548-1024x677.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport TinderCards from \"./TinderCards\";\r\nimport Header from \"./Header\";\r\nimport SwipeButtons from \"./SwipeButtons\";\r\nimport ChatScreen from \"./ChatScreen\";\r\nimport Chats from \"./Chats\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/chat/:userId\">\r\n            <Header backButton=\"/chat\" profilePic />\r\n            <ChatScreen />\r\n          </Route>\r\n          <Route path=\"/chat\">\r\n            <Header backButton=\"/\" profilePic />\r\n            <Chats />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Header />\r\n            <TinderCards />\r\n            <SwipeButtons />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}